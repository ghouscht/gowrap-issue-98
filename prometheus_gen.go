// Code generated by gowrap. DO NOT EDIT.
// template: prometheus
// gowrap: http://github.com/hexdigest/gowrap

package main

import (
	"time"

	dtoAlias "example.com/gowrap/issue/98/dto"

	dtoAlias "example.com/gowrap/issue/98/dto"
	"github.com/prometheus/client_golang/prometheus"
)

// MyInterfaceWithPrometheus implements MyInterface
// interface with all methods wrapped with Prometheus metrics.
type MyInterfaceWithPrometheus struct {
	base         MyInterface
	metric       prometheus.ObserverVec
	instanceName string
}

// NewMyInterfaceWithPrometheus returns an
// instance of the MyInterface decorated
// with prometheus summary metric.
func NewMyInterfaceWithPrometheus(base MyInterface, metric prometheus.ObserverVec, instanceName string) MyInterfaceWithPrometheus {
	return MyInterfaceWithPrometheus{
		base:         base,
		metric:       metric,
		instanceName: instanceName,
	}
}

// SomeMethod implements MyInterface.
func (_d MyInterfaceWithPrometheus) SomeMethod(dto dtoAlias.MyDTO) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		_d.metric.WithLabelValues(_d.instanceName, "SomeMethod", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.SomeMethod(dto)
}
